// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Random.hlsl"

struct VoxelData
{
    float3 position;
    float4 color;
};
// need total count and start position!

RWStructuredBuffer<VoxelData> _VoxelsBuffer;
float4 _BoundAndSize;
float3 _EllipsoidSize;
// float3 _SmokeOrigin;


[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    VoxelData voxel;
    uint3 resolution = _BoundAndSize.xyz; // 60 10 60
    
    uint x = id.x % resolution.x; 
    uint y = (id.x / resolution.x) % resolution.y; 
    uint z = id.x / (resolution.x * resolution.y);

    float3 voxelCoord = uint3(x, y, z) + 0.5f - (resolution / 2.0);

    float3 originToPoint = voxelCoord / _EllipsoidSize;
    voxel.position = voxelCoord * _BoundAndSize.w;

    
    
    voxel.color = float4(Random(id.x + voxelCoord.x), Random(id.x +voxelCoord.y), Random(id.x +voxelCoord.z), 1.0);

    if(length(originToPoint) > 1) voxel.color.a = 0;

    _VoxelsBuffer[id.x] = voxel;
}
